plugins {
    alias(libs.plugins.androidApplication)
    id 'jacoco'
    id "org.sonarqube" version "4.4.1.3373"
    alias(libs.plugins.jetbrainsKotlinAndroid)
}

// Sonarqube-Werte müssen von Sonarcloud unter Gradle kopiert werden. Diese sind individuell
// --Hinweis-- Darauf achten, dass Jacoco mitkopiert wird
sonar {
    properties {
        property "sonar.projectKey", "se2-carcassonne-team_app"
        property "sonar.organization", "se2-carcassonne-team"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.coverage.jacoco.xmlReportPaths", "${project.projectDir}/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml"
    }
}

android {
    namespace 'se2.carcassonne'
    compileSdk 34

    defaultConfig {
        applicationId "se2.carcassonne"
        minSdk 24
        targetSdk 34
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildFeatures {
        viewBinding true
        compose true
    }

    viewBinding  {
        enabled true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    // --Hinzufügen--
    testOptions {
        unitTests.all {
            useJUnitPlatform()
            finalizedBy jacocoTestReport
        }
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.5.1'
    }
    packaging {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

// --Hinzufügen-- + Überprüfen, ob xml.destination Path korrekt ist
tasks.register('jacocoTestReport', JacocoReport) {
    dependsOn 'testDebugUnitTest'

    reports {
        xml.required = true
        xml.destination file("${project.projectDir}/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml")
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "${project.layout.buildDirectory.get().asFile}/intermediates/javac/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories.from = files([mainSrc])
    classDirectories.from = files([debugTree])
    executionData.from = files("${project.layout.buildDirectory.get().asFile}/jacoco/testDebugUnitTest.exec")
}

dependencies {
    // Add the dependency on the imported module
    implementation libs.activity
    implementation libs.appcompat
    implementation libs.material
    implementation libs.constraintlayout
    implementation libs.lifecycle.runtime.ktx
    implementation libs.activity.compose
    implementation platform(libs.compose.bom)
    implementation libs.ui
    implementation libs.ui.graphics
    implementation libs.ui.tooling.preview
    implementation libs.material3
    testImplementation libs.junit
    testImplementation libs.junit.jupiter.api
    testImplementation libs.junit.jupiter
    androidTestImplementation platform(libs.compose.bom)
    androidTestImplementation libs.ui.test.junit4
    debugImplementation libs.ui.tooling
    debugImplementation libs.ui.test.manifest
    testRuntimeOnly libs.junit.jupiter.engine
    androidTestImplementation libs.ext.junit
    androidTestImplementation libs.espresso.core
    implementation libs.lombok
    annotationProcessor libs.lombok
    implementation libs.jackson.databind
    implementation libs.arrow.core
    implementation libs.okhttp.v4120
    implementation libs.stompProtocolAndroid
    implementation libs.rxjava
    implementation libs.material.v150
    implementation group: 'io.github.controlwear', name: 'virtualjoystick', version: '1.10.1'
}